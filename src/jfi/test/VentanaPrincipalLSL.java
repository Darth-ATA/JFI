/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VentanaPrincipalLSL.java
 *
 * Created on 02-feb-2011, 17:26:17
 */

package jfi.test;

import jfi.shape.ImageMaskIO;
import jfi.shape.ImageMask;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import jfi.shape.Contour;
import jfi.shape.CurvatureFunction;
import jfi.shape.FuzzyContour;
import jfi.shape.FuzzyContourFactory;
import jfi.shape.FuzzyPoint;






/**
 *
 * @author Jesús Chamorro
 */
public class VentanaPrincipalLSL extends javax.swing.JFrame {

    /** Creates new form VentanaPrincipal */
    public VentanaPrincipalLSL() {
        initComponents();
        this.setSize(1340, 800);
        setLocationRelativeTo(null);        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuAbrir = new javax.swing.JMenuItem();
        menuMascara = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pruebas Luis");
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(menuAbrir);

        menuMascara.setText("Máscara");
        menuMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMascaraActionPerformed(evt);
            }
        });
        jMenu1.add(menuMascara);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        BufferedImage img;
        ImageMask imgMask;
        Contour contour;
        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile(); 
                img = ImageIO.read(f);
                VentanaImagen vi = new VentanaImagen();
                vi.lienzoImagen.setImage(img);
                this.escritorio.add(vi);
                vi.setVisible(true);
                
                imgMask = ImageMaskIO.read(f);
                contour = new Contour(imgMask);
                VentanaImagen vi2 = new VentanaImagen();
                BufferedImage imgContour = contour.toImage();
                vi2.lienzoImagen.setImage(imgContour);
                this.escritorio.add(vi2);
                vi2.setVisible(true);
                
                //Parametros del sistema
                //int windowSize = contour.size()/15;
                //double exponent = 3;
                //double vv_min = 0.1;
                //double vv_max = 0.6;
                //double tolerance = 0.95;
                
                ArrayList<Double> mask = new ArrayList<Double>();
                mask.add(0.05);
                mask.add(0.25);
                mask.add(0.4);
                mask.add(0.25);
                mask.add(0.05);
                
                Contour filteredContour = contour.filter(mask);
                
                FuzzyContour curvature = FuzzyContourFactory.getInstance(filteredContour, FuzzyContourFactory.TYPE_CURVATURE);
                FuzzyContour linearity = FuzzyContourFactory.getInstance(filteredContour, FuzzyContourFactory.TYPE_LINEARITY);
                FuzzyContour verticity = FuzzyContourFactory.getInstance(filteredContour, FuzzyContourFactory.TYPE_VERTICITY);
                
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\curvature.txt");
                    for (int i = 0; i < curvature.size(); i++){
                        FuzzyPoint fp = (FuzzyPoint) curvature.get(i);
                        out.println(i+"\t"+ fp.getDegree());
                    }
                    out.close();                
                }
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\linearity.txt");
                    for (int i = 0; i < linearity.size(); i++){
                        FuzzyPoint fp = (FuzzyPoint) linearity.get(i);
                        out.println(i+"\t"+ fp.getDegree());
                    }
                    out.close();                
                }
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\verticity.txt");
                    for (int i = 0; i < verticity.size(); i++){
                        FuzzyPoint fp = (FuzzyPoint) verticity.get(i);
                        out.println(i+"\t"+ fp.getDegree());
                    }
                    out.close();                
                }
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
            }catch(Exception ex){
                System.err.println("Error al leer la imagen: " + ex);
           }
        }

    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMascaraActionPerformed
        ImageMask mask=null;
        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
           try{
              File f = dlg.getSelectedFile(); 
              mask = ImageMaskIO.read(f);
              VentanaImagen vi = new VentanaImagen();
              vi.lienzoImagen.setImage(mask);
              this.escritorio.add(vi);
              vi.setVisible(true);
           }catch(Exception ex){
             System.err.println("Error al leer la imagen ("+ex.getMessage()+")");
           }
        }
    }//GEN-LAST:event_menuMascaraActionPerformed

    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM) {
      //if (destCM == null) destCM = ColorModel;
      //WritableRaster wr = destCM.createCompatibleWritableRaster(src.getWidth(),src.getHeight());
        return new BufferedImage(src.getWidth()+60,src.getHeight()+60,BufferedImage.TYPE_INT_RGB);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
         
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        new VentanaPrincipalLSL().setVisible(true);
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuMascara;
    // End of variables declaration//GEN-END:variables

    private double suma(CurvatureFunction curvature) {
        double sum = 0.0;
        
        for(int i = 0; i < curvature.size(); i++)
            sum += curvature.apply(i);
        
        return sum;
    }
    
    private double suma(CurvatureFunction curvature, double alpha){
        double sum = 0.0;
        
        for(int i = 0; i < curvature.size(); i++)
            if (curvature.apply(i) >= alpha)
                sum += curvature.apply(i);
        
        return sum;
    }
    
    private double suma(CurvatureFunction curvature, double alpha, ArrayList<Integer> maxList){
        double sum = 0.0;
        
        for (int i = 0; i < maxList.size(); i++)
            if (curvature.apply(maxList.get(i)) >= alpha)
                sum += escalon(curvature.apply(maxList.get(i)),0,0.95);
        
        return sum;
    }

    public double escalon(double x, double alpha, double beta){
        if (x < alpha)
            return 0;
        else if (x < beta)
            return (x-alpha)/(beta-alpha);
        
        return 1;
    }
    
    
    
    
    
    
    
    
}
