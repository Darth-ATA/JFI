/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VentanaPrincipalLSL.java
 *
 * Created on 02-feb-2011, 17:26:17
 */

package jfi.test;

import jfi.shape.ImageMaskIO;
import jfi.shape.ImageMask;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import jfi.shape.Contour;
import jfi.shape.CurvatureFunction;
import jfi.shape.FuzzyContour;
import jfi.shape.FuzzyPoint;






/**
 *
 * @author Jesús Chamorro
 */
public class VentanaPrincipalLSL extends javax.swing.JFrame {

    /** Creates new form VentanaPrincipal */
    public VentanaPrincipalLSL() {
        initComponents();
        this.setSize(1340, 800);
        setLocationRelativeTo(null);
        
        /*
        Point p = new Point(1,1);
        FuzzyPoint fp = new FuzzyPoint(2,2,0.5f);
        
        
        Contour c = new Contour();
        c.add(p);
        c.getCurvature();
        
        
        FuzzyContour fc = new FuzzyContour();
        fc.add(fp);
        fc.getCurvature();
        
             
        for(Point pi:c){
            System.out.println(pi);
        }
       
         for(Point pi:fc){
            System.out.println(pi);
        }*/
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuAbrir = new javax.swing.JMenuItem();
        menuMascara = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pruebas Luis");
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(menuAbrir);

        menuMascara.setText("Máscara");
        menuMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMascaraActionPerformed(evt);
            }
        });
        jMenu1.add(menuMascara);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        BufferedImage img;
        ImageMask imgMask;
        Contour contour;
        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile(); 
                img = ImageIO.read(f);
                VentanaImagen vi = new VentanaImagen();
                vi.lienzoImagen.setImage(img);
                this.escritorio.add(vi);
                vi.setVisible(true);
                
                imgMask = ImageMaskIO.read(f);
                contour = new Contour(imgMask);
                VentanaImagen vi2 = new VentanaImagen();
                BufferedImage imgContour = contour.toImage();
                vi2.lienzoImagen.setImage(imgContour);
                this.escritorio.add(vi2);
                vi2.setVisible(true);
                
                //CURVATURA
                BufferedImage dest;
                dest = createCompatibleDestImage(img,null);
                WritableRaster destRaster = dest.getRaster();
                
                //Parametros del sistema
                int windowSize = contour.size()/15;
                double exponent = 3;
                double vv_min = 0.1;
                double vv_max = 0.6;
                double tolerance = 0.95;
                
                ArrayList<Double> mask = new ArrayList<Double>();
                mask.add(0.05);
                mask.add(0.25);
                mask.add(0.4);
                mask.add(0.25);
                mask.add(0.05);
                
                Contour filteredContour = contour.filter(mask);
                
                CurvatureFunction curvature = filteredContour.getCurvature(windowSize,0);
                curvature.normalize();
                CurvatureFunction[] linearity = filteredContour.getLinearity(windowSize, 0,exponent);  
                
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\curvatura.txt");
                    for (int i = 0; i < contour.size(); i++){
                        out.println(i+"\t"+curvature.apply(i));
                    }
                    out.close();                
                }
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\linealidad.txt");
                    for (int i = 0; i < contour.size(); i++){
                        out.println(i+"\t"/*+linearity[0].apply(i)+"\t"+linearity[1].apply(i)+"\t"*/+(1-escalon(linearity[2].apply(i),0.8,0.95)));
                    }
                    out.close();                
                }
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
                CurvatureFunction verticity = filteredContour.getVerticity(windowSize,exponent,vv_min, vv_max);
                boolean localMax;
                double max;
                ArrayList<Integer> maxList = new ArrayList<>();
                int numPoints = filteredContour.size();
                for (int i = 0; i < numPoints; i++){
                    localMax = true;
                    max = verticity.apply(i);
                    for (int j = 0; j < 2*windowSize && localMax; j++){
                        if (verticity.apply((i+j-windowSize+numPoints)%numPoints) >= max && (i+j-windowSize+numPoints)%numPoints != i)
                            localMax = false;
                    }                   
                    if (localMax){
                        maxList.add(i);
                        //i += windowSize/2 -1; //Si es maximo, no puede haber mas hasta salir de la ventana
                    }
                }
                try{
                    PrintWriter out = new PrintWriter("C:\\tmp\\vertices.txt");
                    for (int i = 0; i < filteredContour.size(); i++){
                        out.println(i+"\t"+verticity.apply(i));
                    }
                    out.close();                
                }       
                catch(Exception ex){System.err.println("Error al guardar los datos en un fichero");}
                
                float TOPE = 5f;
                
                //White
                for (int i = 0; i < destRaster.getWidth(); i++)
                    for (int j = 0; j < destRaster.getHeight(); j++){
                        destRaster.setSample(i,j,0,255);
                        destRaster.setSample(i,j,1,255);
                        destRaster.setSample(i,j,2,255);
                    }
                
                //Verticity
                for (int i = 0; i < filteredContour.size(); i++){
                    for (int j = 0; j < 25; j++){
                    
                        destRaster.setSample((int)filteredContour.get(i).getX()+j%5-2+30,
                                         (int)filteredContour.get(i).getY()+j/5-2+30,
                                         0,Math.ceil(verticity.apply(i)*255));
                        destRaster.setSample((int)filteredContour.get(i).getX()+j%5-2+30,
                                         (int)filteredContour.get(i).getY()+j/5-2+30,
                                         1,0);
                        destRaster.setSample((int)filteredContour.get(i).getX()+j%5-2+30,
                                         (int)filteredContour.get(i).getY()+j/5-2+30,
                                         2,0);
                
                    }
                }  
                    //crosses
                for(int k = 0; k < maxList.size();k++){
                    System.out.println("Maximo encontrado: "+  escalon(verticity.apply(maxList.get(k)),0,tolerance));
                    for(int i = -8; i < 9; i++)
                        for (int j = 0; j < 4; j++){
                    
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2+i+30,
                                         0,0);
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2+i+30,
                                         1,255);
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2+i+30,
                                         2,0);
                        
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2-i+30,
                                         0,0);
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2-i+30,
                                         1,255);
                        destRaster.setSample((int)filteredContour.get(maxList.get(k)).getX()+j%2+i+30,
                                         (int)filteredContour.get(maxList.get(k)).getY()+j/2-i+30,
                                         2,0);
                
                    }
                }
                    
//                    if(curvature.apply(i)>=TOPE)
//                        destRaster.setSample(contour.get(i).x,
//                                         contour.get(i).y,
//                                         0,255);
//                    else if (curvature.apply(i) <= -TOPE)
//                        destRaster.setSample(contour.get(i).x,
//                                         contour.get(i).y,
//                                         1,255);
//                    else{
//                        destRaster.setSample(contour.get(i).x,
//                                         contour.get(i).y,
//                                         0,255);
//                        destRaster.setSample(contour.get(i).x,
//                                         contour.get(i).y,
//                                         1,255);
//                        destRaster.setSample(contour.get(i).x,
//                                         contour.get(i).y,
//                                         2,255);
//                    }
//                }
                
//                for(int i = 0; i < maxList.size();i++){
//                    destRaster.setSample(contour.get(maxList.get(i)).x,
//                                    contour.get(maxList.get(i)).y,
//                                    0,0);
//                    destRaster.setSample(contour.get(maxList.get(i)).x,
//                                    contour.get(maxList.get(i)).y,
//                                    2,0);
//                    System.out.println("Maximo encontrado en la posición: "+maxList.get(i));
//                }
                
                System.out.println("Suma: "+suma(verticity,0, maxList));
                VentanaImagen vi3 = new VentanaImagen();
                vi3.lienzoImagen.setImage(dest);
                this.escritorio.add(vi3);
                vi3.setVisible(true);
                
                ImageIO.write(dest, "png", new File("C:\\Users\\el_5_\\Documents\\Fig\\Figure1\\output.png"));
                
            }catch(Exception ex){
                System.err.println("Error al leer la imagen: " + ex);
           }
        }

    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMascaraActionPerformed
        ImageMask mask=null;
        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
           try{
              File f = dlg.getSelectedFile(); 
              mask = ImageMaskIO.read(f);
              VentanaImagen vi = new VentanaImagen();
              vi.lienzoImagen.setImage(mask);
              this.escritorio.add(vi);
              vi.setVisible(true);
           }catch(Exception ex){
             System.err.println("Error al leer la imagen ("+ex.getMessage()+")");
           }
        }
    }//GEN-LAST:event_menuMascaraActionPerformed

    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM) {
      //if (destCM == null) destCM = ColorModel;
      //WritableRaster wr = destCM.createCompatibleWritableRaster(src.getWidth(),src.getHeight());
        return new BufferedImage(src.getWidth()+60,src.getHeight()+60,BufferedImage.TYPE_INT_RGB);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
         
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalLSL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        new VentanaPrincipalLSL().setVisible(true);
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuMascara;
    // End of variables declaration//GEN-END:variables

    private double suma(CurvatureFunction curvature) {
        double sum = 0.0;
        
        for(int i = 0; i < curvature.size(); i++)
            sum += curvature.apply(i);
        
        return sum;
    }
    
    private double suma(CurvatureFunction curvature, double alpha){
        double sum = 0.0;
        
        for(int i = 0; i < curvature.size(); i++)
            if (curvature.apply(i) >= alpha)
                sum += curvature.apply(i);
        
        return sum;
    }
    
    private double suma(CurvatureFunction curvature, double alpha, ArrayList<Integer> maxList){
        double sum = 0.0;
        
        for (int i = 0; i < maxList.size(); i++)
            if (curvature.apply(maxList.get(i)) >= alpha)
                sum += escalon(curvature.apply(maxList.get(i)),0,0.95);
        
        return sum;
    }

    public double escalon(double x, double alpha, double beta){
        if (x < alpha)
            return 0;
        else if (x < beta)
            return (x-alpha)/(beta-alpha);
        
        return 1;
    }
    
    
    
    
    
    
    
    
}
